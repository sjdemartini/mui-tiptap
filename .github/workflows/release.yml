name: Publish Package to npmjs
on:
  push:
    tags:
      - "v*.*.*"
jobs:
  # Re-run the usual tests and build steps to ensure things are stable for release
  build-test:
    permissions:
      contents: read
    uses: ./.github/workflows/build-test.yml # use the callable built-test to run tests

  # Then release to npm
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # Required for OIDC
      # (https://docs.npmjs.com/trusted-publishers#github-actions-configuration):
      id-token: write

    needs: [build-test] # Require standard CI steps to pass before publishing

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      # Set up .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          registry-url: "https://registry.npmjs.org"

      # Ensure npm 11.5.1 or later is installed
      # (https://docs.npmjs.com/trusted-publishers#github-actions-configuration)
      - name: Update npm
        run: npm install -g npm@latest

      - run: pnpm install

      - run: pnpm run build

      # TODO(Steven DeMartini): If pre-releases are used in the future (after a
      # non-alpha release has been published), we'll probably want to update
      # this command to pass in `--tag` with next/alpha/beta as appropriate, to
      # avoid updating the default `latest` tag. We could presumably parse the
      # package version using something like
      # `cat package.json | jq -r '.version'`
      # (https://gist.github.com/DarrenN/8c6a5b969481725a4413?permalink_comment_id=4156395#gistcomment-4156395)
      # to parse the version, then could regex for whether it's a pre-release or
      # not.
      - run: npm publish
